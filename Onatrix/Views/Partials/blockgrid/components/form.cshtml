@using Umbraco.Cms.Web.Common.PublishedModels
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels
@using Umbraco.Cms.Core.PropertyEditors.ValueConverters

@{
    var paddingTop = Model?.Content.Value<bool>("paddingTop") == true ? "div-padding-top" : "";
    var paddingBottom = Model?.Content.Value<bool>("paddingBottom") == true ? "div-padding-bottom" : "";
    var paddingLeft = Model?.Content.Value<bool>("paddingLeft") == true ? "div-padding-left" : "";
    var paddingRight = Model?.Content.Value<bool>("paddingRight") == true ? "div-padding-right" : "";
    var boxShadow = Model?.Content.Value<bool>("boxShadow") == true ? "box-shadow" : "";
    var roundEdges = Model?.Content.Value<bool>("roundEdges") == true ? "round-edges" : "";

    var BackgroundColorLabel = Model?.Content.Value<ColorPickerValueConverter.PickedColor>("backgroundColor")?.Label.ToLower() ?? "";
    var backgroundColorClass = !string.IsNullOrEmpty(BackgroundColorLabel) ? $"bg-{BackgroundColorLabel}" : "";
    
    var sectionClasses = $" {paddingTop} {roundEdges} {boxShadow} {paddingBottom} {paddingLeft} {paddingRight} {backgroundColorClass}".Trim();

}

<form class="@sectionClasses" onsubmit="" novalidate>
    @* Render the block areas *@
    @if (Model != null)
    {
        @await Html.GetBlockGridItemAreasHtmlAsync(Model)
    }
</form>